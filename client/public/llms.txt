# PromptPulse - Claude Code Usage Tracking Platform

## Overview
Multi-user platform for tracking and analyzing Claude Code usage across multiple machines. Features automatic data collection, user authentication, and a beautiful web dashboard for visualizing usage patterns.

## Key Features
- Multi-user support with API key authentication
- Beautiful dashboard built with Next.js and Recharts
- Multi-machine tracking - aggregate usage across all devices
- Automatic collection via cron job configuration
- Detailed analytics - daily costs, token usage, session tracking
- Project-based insights and cost tracking

## Project Structure

### CLI Interface
- `bin/promptpulse.js` - Main CLI entry point
- `lib/` - CLI library code
  - `lib/auth.js` - Authentication utilities and getUserByApiKey
  - `lib/auth-cli.js` - CLI authentication commands (login, logout, whoami)
  - `lib/collect.js` - Data collection logic
  - `lib/config.js` - Configuration management
  - `lib/db-manager.js` - Database connection pooling and retry logic
  - `lib/logger.js` - Winston-based structured logging system
  - `lib/setup.js` - Cron setup utilities
  - `lib/user-cli.js` - User management CLI (deprecated commands)
  - `lib/user-management.js` - User management backend
  - `lib/server-auth.js` - Server-side authentication middleware

### API Server
- `server.js` - Express.js API server with authentication
- `migrations/` - Database schema migrations
  - `001_initial_schema.sql` - Consolidated database schema with KSUID users, secure API keys

### Web Dashboard
- `client/` - Next.js dashboard application
  - `client/src/app/` - Next.js app directory
    - `client/src/app/page.tsx` - Dashboard home page
    - `client/src/app/leaderboard/page.tsx` - Leaderboard view
    - `client/src/app/settings/page.tsx` - Settings page
    - `client/src/app/layout.tsx` - Root layout
  - `client/src/components/` - React components
    - `client/src/components/auth/login-form.tsx` - Authentication form
    - `client/src/components/dashboard/` - Dashboard components
      - `stats-cards.tsx` - Usage statistics cards
      - `usage-chart.tsx` - Interactive usage charts
      - `machines-table.tsx` - Machine overview table
    - `client/src/components/layout/` - Layout components
      - `app-layout.tsx` - Main application layout
      - `side-nav.tsx` - Navigation sidebar
      - `top-header.tsx` - Header component
      - `user-menu.tsx` - User account menu
    - `client/src/components/ui/` - UI components
      - `button.tsx`, `card.tsx`, `input.tsx`, etc.
  - `client/src/contexts/auth-context.tsx` - Authentication context
  - `client/src/lib/api.ts` - API client utilities
  - `client/src/types/index.ts` - TypeScript type definitions

## CLI Commands

### Authentication
- `promptpulse login` - Create new account (interactive)
- `promptpulse login <api-key>` - Login with existing API key
- `promptpulse logout` - Clear authentication and log out
- `promptpulse whoami` - Show current user information
- `promptpulse user config show` - Show configuration (debugging)

### Data Collection
- `promptpulse collect` - Collect and upload Claude Code usage data
- `promptpulse collect --granularity daily` - Only daily aggregates
- `promptpulse collect --granularity session` - Only session data
- `promptpulse collect --granularity blocks` - Only 5-hour blocks
- `promptpulse collect --granularity all` - Everything (default)

### Setup & Dashboard
- `promptpulse setup` - Set up cron job for automatic collection
- `promptpulse dashboard` - Open web dashboard in browser

### Aliases
- `ppulse` - Short alias for `promptpulse`

## API Endpoints

### Authentication Required
All endpoints require `X-API-Key` header with valid API key.

### User Management
- `POST /api/users` - Create new user
- `GET /api/users` - List all users (authenticated)

### Usage Data
- `GET /api/usage/aggregate` - Get aggregated usage data
- `GET /api/machines` - Get user's machines
- `GET /api/usage/sessions?limit=50&projectPath=myproject` - Get sessions
- `GET /api/usage/blocks?activeOnly=true` - Get billing blocks

### Analytics
- `GET /api/usage/analytics/patterns?period=day` - Usage patterns
- `GET /api/usage/analytics/costs?groupBy=project` - Cost breakdown

## Configuration

### Environment Variables

#### Required
- `DATABASE_URL` - SQLite Cloud connection string

#### Optional Server Configuration
- `MACHINE_ID` - Custom machine identifier (defaults to hostname)
- `PORT` - API server port (defaults to 3000)
- `NODE_ENV` - Environment mode (development/production)

#### Database Connection Pool
- `DB_MAX_CONNECTIONS` - Maximum database connections (default: 10)
- `DB_IDLE_TIMEOUT` - Connection idle timeout in ms (default: 30000)
- `DB_RETRY_ATTEMPTS` - Database retry attempts on failure (default: 3)
- `DB_RETRY_DELAY` - Base retry delay in ms (default: 1000)

#### Logging Configuration
- `LOG_LEVEL` - Logging level: error, warn, info, debug (default: info in production, debug in development)

#### Email Service (Optional)
- `RESEND_API_KEY` - Resend API key for email functionality
- `RESEND_FROM_EMAIL` - From email address for notifications

### User Configuration
- `~/.promptpulse/config.json` - User credentials and settings

### Data Sources
- `~/.claude/projects/**/*.jsonl` - Claude Code usage data files
- `$CLAUDE_CONFIG_DIR/projects/**/*.jsonl` - Alternative path if set

## Data Flow
1. Collection: CLI reads Claude usage data from ~/.claude/projects/
2. Authentication: User's API key validates requests
3. Storage: Data stored in SQLite Cloud with user isolation
4. API: RESTful endpoints serve user-specific data
5. Dashboard: React app visualizes usage patterns

## Automation Scripts
- Built-in cron configuration via `promptpulse setup` command
- Automatic collection scheduling through CLI

## Key Files
- `package.json` - NPM package configuration with CLI binaries
- `README.md` - Comprehensive documentation
- `scripts/migrate.js` - Database migration runner
- `.npmignore` - Files excluded from NPM package
- `railway.json` - Railway deployment configuration
- `Dockerfile` - Container configuration

## Development
- Node.js 18+ required
- SQLite Cloud or local SQLite database
- Next.js for dashboard development
- Express.js for API server