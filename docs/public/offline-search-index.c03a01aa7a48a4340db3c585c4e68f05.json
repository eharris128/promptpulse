[{"body":"Getting Started with PromptPulse PromptPulse is a command-line tool and web dashboard for tracking Claude Code usage analytics. This guide will help you get up and running quickly.\nInstallation Install PromptPulse globally using npm:\n1 npm install -g promptpulse Quick Start 1. Create Account and Login Create a new account or login with your API key:\n1 2 3 4 5 # Interactive account creation promptpulse login # Or login with an existing API key promptpulse login --api-key your-api-key-here 2. Verify Your Setup Check your login status:\n1 promptpulse whoami 3. Collect Your First Data Start collecting Claude Code usage data:\n1 2 3 4 5 # Collect all available data promptpulse collect # Or collect specific granularity promptpulse collect --granularity daily 4. Set Up Automatic Collection Configure automatic data collection:\n1 2 3 4 5 6 7 8 # Set up 15-minute collection (default) promptpulse setup # Set up hourly collection promptpulse setup --interval 60 # Set up daily collection promptpulse setup --interval daily 5. View Your Dashboard Open your web dashboard:\n1 promptpulse dashboard Next Steps CLI Reference - Complete command documentation Dashboard Guide - Web interface walkthrough Teams - Team collaboration features Privacy - Understanding data collection Quick Commands Reference Command Description promptpulse login Create account or login promptpulse whoami Show current user promptpulse collect Collect usage data promptpulse setup Configure automatic collection promptpulse status Check collection health promptpulse dashboard Open web dashboard promptpulse doctor Diagnose issues ","categories":"","description":"Quick start guide for PromptPulse","excerpt":"Quick start guide for PromptPulse","ref":"/getting-started/","tags":"","title":"Getting Started"},{"body":"CLI Reference PromptPulse provides a comprehensive command-line interface for managing your Claude Code usage analytics.\nCore Commands promptpulse / ppulse The main CLI command. Can be used in short form as ppulse.\nAuthentication Commands promptpulse login Create a new account or login with an existing API key.\n1 2 3 4 5 # Interactive account creation promptpulse login # Login with API key promptpulse login --api-key YOUR_API_KEY Options:\n--api-key - Login with existing API key promptpulse logout Clear authentication and log out.\n1 promptpulse logout promptpulse whoami Show current user information.\n1 promptpulse whoami Data Collection Commands promptpulse collect Collect and upload Claude Code usage data.\n1 2 3 4 5 6 7 # Collect all available data promptpulse collect # Collect specific granularity promptpulse collect --granularity daily promptpulse collect --granularity session promptpulse collect --granularity blocks Options:\n--granularity - Data collection granularity (all, daily, session, blocks) promptpulse setup Configure automatic data collection with cron.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Set up 15-minute collection (default) promptpulse setup # Set up 30-minute collection promptpulse setup --interval 30 # Set up hourly collection promptpulse setup --interval 60 # Set up daily collection (9 AM) promptpulse setup --interval daily # Remove automatic collection promptpulse setup --remove Options:\n--interval - Collection interval (15, 30, 60, daily) --remove - Remove automatic collection Monitoring Commands promptpulse status Show collection status and health information.\n1 promptpulse status promptpulse doctor Diagnose common collection issues and system health.\n1 promptpulse doctor Dashboard Command promptpulse dashboard Open the web dashboard in your browser.\n1 promptpulse dashboard Environment Variables Privacy Controls PROJECT_PATH_PRIVACY Control project path collection privacy:\n1 2 3 4 5 6 7 8 9 10 11 # Only project folder names (default) export PROJECT_PATH_PRIVACY=basename # Complete project paths export PROJECT_PATH_PRIVACY=full # Hashed paths for analytics export PROJECT_PATH_PRIVACY=hash # No project path collection export PROJECT_PATH_PRIVACY=none MACHINE_ID Custom machine identifier:\n1 export MACHINE_ID=my-work-laptop Configuration Configuration is stored in ~/.promptpulse/config.json:\n1 2 3 4 5 { \"apiKey\": \"your-api-key\", \"userId\": \"user-id\", \"machine\": \"hostname\" } Data Collection Details Claude Code Data Sources PromptPulse reads usage data from:\n~/.claude/projects/**/*.jsonl Collected Data Usage Statistics: Token counts, costs, timestamps Project Paths: Configurable privacy levels Machine Identifiers: Hostname or custom MACHINE_ID Session Data: Claude Code session information Privacy Guarantees No Content Collection: Prompts and conversations are NEVER collected Isolated Data: Each user’s data is completely isolated Configurable Privacy: Control what project information is shared Troubleshooting Common Issues Authentication Errors\n1 2 promptpulse logout promptpulse login Collection Issues\n1 2 promptpulse doctor promptpulse status Cron Setup Problems\n1 2 promptpulse setup --remove promptpulse setup Debug Information All operations log to ~/.promptpulse/collection.log for debugging.\n","categories":"","description":"Complete command-line interface documentation","excerpt":"Complete command-line interface documentation","ref":"/cli-reference/","tags":"","title":"CLI Reference"},{"body":"Dashboard Guide The PromptPulse dashboard provides a comprehensive web interface for viewing your Claude Code usage analytics, managing teams, and configuring settings.\nAccessing the Dashboard Open the dashboard from the command line:\n1 promptpulse dashboard Or visit directly at your configured dashboard URL.\nAuthentication The dashboard requires your API key for authentication:\nEnter your API key in the login form The key is stored securely in your browser Use promptpulse whoami to find your API key if needed Main Features Usage Statistics View comprehensive usage analytics:\nToken Usage: Daily, weekly, and monthly token consumption Cost Tracking: Detailed cost analysis across models Session Analytics: Session duration and activity patterns Model Breakdown: Usage statistics by Claude model Usage Charts Interactive charts showing:\nTime-series usage data Model usage distribution Cost trends over time Session activity patterns Machine Management Manage multiple machines:\nView all connected machines See last collection times Monitor machine-specific usage Identify inactive machines Project Analytics Project-level insights:\nUsage by project (respects privacy settings) Project activity timelines Session counts per project Popular project patterns Leaderboards Public Leaderboard Optional participation in public rankings:\nSet a display name for privacy Compare with other users Track your ranking position Opt in/out at any time Team Leaderboards Team-specific competitions:\nCreate and join teams Team usage rankings Collaborative analytics Role-based permissions Team Management Creating Teams Navigate to Teams section Click “Create Team” Set team name and description Configure privacy settings Inviting Members Generate invite links Share with team members Manage member roles Monitor team activity Team Roles Owner: Full team management permissions Admin: Can invite members and manage settings Member: View team analytics and participate Settings Privacy Settings Control your data sharing:\nPublic Leaderboard: Opt in/out of public rankings Display Name: Set public display name Team Display Name: Separate name for team contexts Project Privacy: Configure project path sharing Email Preferences Manage email notifications:\nWeekly usage reports Monthly summaries Team notifications Security alerts Product updates Account Management View account information Manage API keys Update profile settings Delete account (if needed) Analytics Features Usage Blocks Detailed usage tracking:\nIndividual coding blocks Block duration and token usage Cost per block Model usage per block Session Analysis Session-level insights:\nSession start/end times Total session duration Blocks per session Session cost analysis Cost Management Financial tracking:\nDaily/weekly/monthly costs Cost per model Usage efficiency metrics Budget tracking tools Mobile Responsiveness The dashboard is fully responsive:\nMobile-optimized layouts Touch-friendly interfaces Responsive charts and tables Mobile navigation menus Data Export Export your data:\nCSV exports of usage data JSON data dumps Custom date ranges Filtered exports Troubleshooting Common Issues API Key Issues\nEnsure API key is correct Try logging out and back in via CLI Check promptpulse whoami Missing Data\nRun promptpulse collect to update data Check collection status with promptpulse status Verify automatic collection is working Team Problems\nEnsure you have proper permissions Check invite link validity Contact team owner if needed Browser Support Supported browsers:\nChrome 90+ Firefox 88+ Safari 14+ Edge 90+ Performance For optimal performance:\nUse modern browsers Clear browser cache if needed Ensure stable internet connection Close unused browser tabs ","categories":"","description":"Web dashboard features and usage","excerpt":"Web dashboard features and usage","ref":"/dashboard/","tags":"","title":"Dashboard Guide"},{"body":"Teams PromptPulse teams enable collaboration, friendly competition, and shared analytics among colleagues, friends, or coding communities.\nTeam Features Team Leaderboards Compare usage statistics within your team Track team member progress over time Friendly competition and motivation Private team analytics Role-Based Access Owner: Full team management permissions Admin: Can invite members and manage settings Member: View team analytics and participate in leaderboards Invite System Generate secure invite links Share with team members Time-limited invite codes Track invitation status Creating a Team From the Dashboard Navigate to the Teams section Click “Create Team” Enter team name and description Configure team settings Start inviting members Team Configuration When creating a team, you can configure:\nTeam Name: Public team identifier Description: Team purpose and details Privacy Settings: Control data sharing within team Leaderboard Settings: Enable/disable team rankings Joining a Team Via Invite Link Receive invite link from team owner/admin Click the link to join Authenticate with your PromptPulse account Accept team invitation Via Invite Code Get invite code from team member Navigate to Teams → Join Team Enter the invite code Accept invitation Team Management Inviting Members 1 2 # Generate invite links through the dashboard # Or share team invite codes directly Invite Link Example:\nhttps://dashboard.promptpulse.dev/teams/join/abc123def456 Managing Members Team owners and admins can:\nView all team members Change member roles Remove members from team Send additional invitations View member activity status Team Settings Configure team preferences:\nTeam Display Settings: How team appears in leaderboards Privacy Controls: What data is shared among members Notification Settings: Team-related email notifications Leaderboard Participation: Enable/disable team leaderboards Team Analytics Team Dashboard View comprehensive team statistics:\nTotal Team Usage: Combined token usage across all members Team Cost Analysis: Shared cost insights Member Contributions: Individual member statistics Team Progress: Usage trends over time Leaderboard Features Team leaderboards show:\nToken Usage Rankings: Who’s using Claude Code most Cost Efficiency: Best value per token used Session Activity: Most active team members Project Diversity: Breadth of projects worked on Privacy in Teams Team analytics respect individual privacy:\nNo Content Sharing: Conversations remain private Aggregated Data Only: Individual sessions aren’t exposed Opt-out Available: Members can leave teams anytime Configurable Sharing: Control what data is visible to team Use Cases Development Teams Track team coding productivity Compare usage patterns across projects Monitor Claude Code adoption within team Budget management for AI coding tools Educational Groups Student progress tracking Course completion metrics Learning pattern analysis Collaborative coding projects Open Source Communities Contributor activity tracking Project usage analytics Community engagement metrics Recognition for active contributors Research Groups Research productivity metrics Tool usage analysis Collaboration patterns Publication support tracking Team Privacy Data Sharing Controls Team members can control:\nProfile Visibility: Show/hide profile information Usage Statistics: Share detailed or summary statistics Project Information: Control project path sharing Activity Status: Show/hide recent activity Team Data Policies No Individual Sessions: Detailed sessions remain private Aggregated Analytics: Only summary statistics shared Voluntary Participation: Team features are opt-in Easy Exit: Leave teams anytime without data retention Best Practices Team Organization Clear Purpose: Define why the team exists Regular Check-ins: Review team analytics together Inclusive Environment: Welcome all skill levels Respect Privacy: Honor individual privacy preferences Effective Team Usage Set Goals: Define team usage or learning objectives Share Insights: Discuss interesting usage patterns Friendly Competition: Keep competition positive and motivating Support Members: Help teammates optimize their workflows Security Considerations Trusted Members: Only invite people you trust Regular Reviews: Periodically review team membership Monitor Activity: Watch for unusual activity patterns Secure Invites: Don’t share invite links publicly Troubleshooting Teams Common Issues Invite Links Not Working\nCheck link expiration Verify recipient has PromptPulse account Generate new invite link Missing Team Data\nEnsure members are collecting data regularly Check team member permissions Verify team privacy settings Permission Problems\nConfirm user roles and permissions Contact team owner for role changes Check team configuration settings Getting Help If you encounter team-related issues:\nCheck team settings and permissions Review the troubleshooting section Contact team owners or admins Use promptpulse doctor for technical issues ","categories":"","description":"Team collaboration and leaderboards","excerpt":"Team collaboration and leaderboards","ref":"/teams/","tags":"","title":"Teams"},{"body":"Development Guide Welcome to PromptPulse development! This guide covers everything you need to know about contributing to the project.\nQuick Start Prerequisites Node.js 18.0.0 or higher npm or yarn Git SQLite Cloud account (for database) Development Setup 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 # Clone the repository git clone https://github.com/eharris128/promptpulse.git cd promptpulse # Install dependencies npm install # Set up environment variables cp .env.example .env # Edit .env with your configuration # Run database migrations npm run migrate # Start development environment npm run dev This starts both the API server (port 3000) and the dashboard (port 3001).\nProject Architecture Core Components CLI Tool (bin/promptpulse.js) - Command-line interface API Server (server.js) - Express.js backend Dashboard (client/) - Next.js frontend Library (lib/) - Shared utilities Directory Structure promptpulse/ ├── bin/ # CLI executable ├── lib/ # Core libraries ├── client/ # Next.js dashboard ├── routes/ # API routes ├── migrations/ # Database migrations ├── scripts/ # Development scripts └── docs/ # Hugo documentation Development Commands Core Development 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # Full development (API + dashboard) npm run dev # API server only npm run server:dev # Dashboard only npm run client:dev # Run tests npm test # Database migrations npm run migrate CLI Development 1 2 3 4 5 6 # Link CLI for global testing npm link # Test CLI commands promptpulse --help promptpulse doctor Documentation 1 2 3 4 5 6 7 8 # Build documentation cd docs \u0026\u0026 hugo # Serve documentation locally cd docs \u0026\u0026 hugo server # Build for production cd docs \u0026\u0026 hugo --minify Code Style JavaScript/Node.js Use ES modules (type: \"module\" in package.json) Prefer async/await over callbacks Use consistent error handling Follow Express.js middleware patterns React/Next.js Use TypeScript for type safety Follow React hooks patterns Use Tailwind CSS for styling Implement proper error boundaries Database Use modular migrations Implement proper indexes Use KSUID for primary keys Follow data isolation patterns Testing Running Tests 1 2 3 4 5 6 7 8 # Run all tests npm test # Run specific test files npm test -- --grep \"auth\" # Run with coverage npm run test:coverage Test Structure Unit tests in __tests__/ directories Integration tests for API endpoints End-to-end tests for CLI commands Browser tests for dashboard features Database Development Migrations Create new migrations:\n1 2 # Create new migration file touch migrations/007_new_feature.sql Migration file structure:\n1 2 3 4 5 6 7 8 9 10 11 12 13 -- Migration: 007_new_feature.sql -- Description: Add new feature support -- Up migration CREATE TABLE new_feature ( id TEXT PRIMARY KEY, user_id TEXT NOT NULL, created_at DATETIME DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES users(id) ); -- Down migration (for rollbacks) -- DROP TABLE new_feature; Database Schema Key tables:\nusers - User accounts with KSUID IDs usage_data - Token usage and costs teams - Team information team_members - Team membership email_preferences - Notification settings API Development Adding New Endpoints Create route file in routes/ Implement authentication middleware Add proper error handling Update API documentation Example route:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // routes/new-feature.js import express from 'express'; import { authenticateUser } from '../lib/server-auth.js'; const router = express.Router(); router.get('/new-feature', authenticateUser, async (req, res) =\u003e { try { // Implementation here res.json({ success: true }); } catch (error) { res.status(500).json({ error: error.message }); } }); export default router; Authentication All API endpoints require authentication:\n1 2 3 4 import { authenticateUser } from '../lib/server-auth.js'; // Apply to routes router.use(authenticateUser); Dashboard Development Adding New Pages Create page in client/src/app/ Add navigation links Implement authentication checks Add responsive design Component Structure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 // client/src/components/feature/new-component.tsx 'use client'; import { useState, useEffect } from 'react'; import { useAuth } from '../../contexts/auth-context'; export default function NewComponent() { const { user, apiKey } = useAuth(); // Component implementation return ( \u003cdiv className=\"space-y-4\"\u003e {/* Component JSX */} \u003c/div\u003e ); } CLI Development Adding New Commands Add command in bin/promptpulse.js Implement logic in lib/ modules Add proper error handling Update help documentation Example command:\n1 2 3 4 5 6 7 8 9 10 11 12 13 // bin/promptpulse.js program .command('new-feature') .description('Description of new feature') .option('-v, --verbose', 'Verbose output') .action(async (options) =\u003e { try { await newFeatureHandler(options); } catch (error) { console.error('Error:', error.message); process.exit(1); } }); Deployment API Server Deployment The API server can be deployed to:\nRailway Heroku DigitalOcean App Platform AWS/GCP/Azure Environment variables required:\n1 2 3 DATABASE_URL=your_sqlite_cloud_url NODE_ENV=production PORT=3000 Dashboard Deployment The dashboard can be deployed to:\nVercel (recommended) Netlify AWS Amplify Configure build settings:\n1 2 3 4 5 { \"buildCommand\": \"npm run build\", \"outputDirectory\": \".next\", \"installCommand\": \"npm install\" } Contributing Pull Request Process Fork the repository Create feature branch Make changes with tests Update documentation Submit pull request Code Review Guidelines All code must pass CI/CD checks Include tests for new features Update documentation as needed Follow existing code patterns Ensure backward compatibility Issue Reporting When reporting issues:\nUse issue templates Provide reproduction steps Include environment details Add relevant logs/screenshots Security Security Considerations Never commit API keys or secrets Use proper input validation Implement rate limiting Follow OWASP guidelines Regular dependency updates Reporting Security Issues Report security vulnerabilities to:\nEmail: security@promptpulse.dev Follow responsible disclosure Provide detailed reproduction steps Release Process Version Management 1 2 3 4 5 6 7 8 9 10 11 12 # Update version npm version patch|minor|major # Build and test npm run build npm test # Publish to npm npm publish # Tag release on GitHub git push --tags Release Checklist Update version numbers Update CHANGELOG.md Run full test suite Update documentation Test deployment Publish to npm Create GitHub release Announce release Getting Help Development Questions Check existing documentation Search GitHub issues Ask in discussions Contact maintainers Resources Project README Contributing Guidelines Code of Conduct ","categories":"","description":"Contributing to PromptPulse development","excerpt":"Contributing to PromptPulse development","ref":"/development/","tags":"","title":"Development"},{"body":"PromptPulse Documentation Welcome to PromptPulse, the comprehensive analytics and leaderboard platform for Claude Code usage.\nPromptPulse Documentation Get Started GitHub Track your AI coding sessions, compare with peers, and optimize your workflow\nEasy Setup Install PromptPulse with a single command and start tracking immediately.\nRich Analytics Detailed insights into your Claude Code usage patterns and productivity.\nTeam Collaboration Create teams, compare progress, and collaborate with your colleagues.\nPrivacy First Your code and conversations stay private. We only track usage statistics.\nLeaderboards Optional public and team leaderboards to motivate and compare progress.\nAutomation Set up automatic data collection with configurable intervals.\n","categories":"","description":"Usage analytics and leaderboards for Claude Code","excerpt":"Usage analytics and leaderboards for Claude Code","ref":"/","tags":"","title":"PromptPulse Documentation"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"}]