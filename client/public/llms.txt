# PromptPulse - Claude Code Usage Analytics Platform

PromptPulse v1.1.2 is a comprehensive analytics and leaderboard platform designed specifically for Claude Code usage tracking. It provides detailed insights into AI coding productivity across multiple machines with team collaboration features.

## Core Components

### CLI Tool (`promptpulse` / `ppulse`)
Command-line interface for data collection, authentication, and system management.

**Authentication Commands:**
- `promptpulse login` - Create account or login with API key
- `promptpulse logout` - Clear authentication
- `promptpulse whoami` - Show current user information

**Data Collection:**
- `promptpulse collect` - Collect usage data (all granularities)
- `promptpulse collect --granularity [daily|session|blocks|all]` - Specific data collection
- `promptpulse setup` - Configure automatic collection with cron
- `promptpulse setup --interval [15|30|60|daily]` - Set collection frequency
- `promptpulse setup --remove` - Remove automatic collection

**Monitoring & Diagnostics:**
- `promptpulse status` - Collection health and status
- `promptpulse doctor` - Diagnose common issues
- `promptpulse dashboard` - Open web dashboard

### Web Dashboard
Next.js-based dashboard providing:
- Real-time usage analytics and charts
- Team management and collaboration
- Leaderboard participation (opt-in)
- Privacy controls and settings
- Multi-machine usage tracking

### API Server
Express.js backend with:
- API key authentication
- SQLite Cloud database integration
- Rate limiting and security measures
- RESTful endpoints for all operations
- Team management with role-based permissions

## Architecture

### Database Schema
**Users Table:**
- KSUID-based user IDs
- Secure API key authentication
- Email preference management (5 granular controls)

**Usage Data:**
- Token usage statistics (input, output, cache creation/read)
- Cost calculations and billing blocks
- Session tracking and project analytics
- Machine identification for multi-device support

**Teams System:**
- KSUID-based team IDs
- Role hierarchy: owner > admin > member
- Invitation system with secure invite codes
- Team leaderboards separate from public rankings

### Data Sources
PromptPulse reads Claude Code usage from:
- `~/.claude/projects/**/*.jsonl` (standard location)
- `$CLAUDE_CONFIG_DIR/projects/**/*.jsonl` (custom paths)

**Data Collected:**
- Usage statistics: token counts, costs, timestamps, model information
- Project paths: configurable privacy levels (basename/full/hash/none)
- Machine identifiers: hostname or custom MACHINE_ID
- Session data: timestamps, duration, project information

**Never Collected:**
- Prompt content or conversations
- Code snippets or file contents
- Personal information beyond usage statistics

## Privacy Controls

### Project Path Privacy (`PROJECT_PATH_PRIVACY`)
- `basename` (default): Only project folder names
- `full`: Complete project paths  
- `hash`: Hashed paths for analytics
- `none`: No project path collection

### Leaderboard Privacy
- Public leaderboard: completely opt-in
- Team leaderboards: separate privacy controls
- Custom display names for anonymity
- Granular data sharing preferences

## Team Features

### Team Management
- Create teams with custom names/descriptions
- Generate secure invite links with expiration
- Role-based permissions (owner/admin/member)
- Team usage analytics and leaderboards

### Team Collaboration
- Aggregate team usage statistics
- Compare member productivity (privacy-respecting)
- Team-specific leaderboards and rankings
- Separate team and public display names

## Installation & Setup

```bash
# Install globally
npm install -g promptpulse

# Create account
promptpulse login

# Start collecting data
promptpulse collect

# Set up automatic collection
promptpulse setup
```

## Development Environment

### Build Commands
- `npm run dev` - Full development (server + client)
- `npm run server:dev` - API server only (port 3000)
- `npm run client:dev` - Dashboard only (port 3001)
- `npm run migrate` - Apply database migrations
- `npm test` - E2E test suite with Playwright

### Database Management (Goose)
- `goose sqlite3 database.db status` - Migration status
- `goose sqlite3 database.db up` - Apply migrations
- `goose sqlite3 database.db down` - Rollback migration
- `npm run migrate` - Apply migrations via custom runner

### Testing
Comprehensive E2E test suite covering:
- All 35+ API endpoints
- Authentication and user management
- Data collection and aggregation
- Team management and invitations
- Leaderboard functionality
- Privacy controls

## Environment Variables

**Required:**
- `DATABASE_URL` - SQLite Cloud connection string

**Optional:**
- `MACHINE_ID` - Custom machine identifier
- `PROJECT_PATH_PRIVACY` - Privacy level for project paths
- `PORT` - API server port (default: 3000)
- `NODE_ENV` - Environment mode
- `RESEND_API_KEY` - Email functionality
- `EMAIL_FROM_DOMAIN` - Email sender domain
- `LOG_LEVEL` - Logging verbosity

## Configuration Files

### CLI Configuration
`~/.promptpulse/config.json`:
```json
{
  "apiKey": "secure-api-key",
  "userId": "ksuid-user-id", 
  "machine": "hostname-or-custom-id"
}
```

### Collection Logs
`~/.promptpulse/collection.log` - Automatic collection logging

## API Endpoints

### Authentication
- `POST /api/users` - Create user account
- `GET /api/users/me` - Get current user info
- `PUT /api/users/me` - Update user settings

### Data Collection
- `POST /api/usage` - Upload usage data
- `GET /api/usage/stats` - Get usage statistics
- `GET /api/usage/sessions` - Session analytics
- `GET /api/usage/projects` - Project analytics

### Team Management
- `POST /api/teams` - Create team
- `GET /api/teams` - List user teams
- `POST /api/teams/:id/invite` - Create invite
- `POST /api/teams/join/:code` - Join team via invite
- `GET /api/teams/:id/members` - Team members
- `PUT /api/teams/:id/members/:userId` - Update member role

### Leaderboards
- `GET /api/leaderboard/daily` - Daily public leaderboard
- `GET /api/leaderboard/weekly` - Weekly public leaderboard  
- `GET /api/leaderboard/teams/:id` - Team leaderboard

## Use Cases

**Development Teams:**
- Track team coding productivity
- Compare usage across projects
- Monitor AI tool adoption
- Budget management for AI coding tools

**Educational Groups:**
- Student progress tracking
- Course completion metrics
- Learning pattern analysis
- Collaborative coding projects

**Organizations:**
- Department usage analytics
- Cost optimization insights
- Productivity measurement
- Multi-team collaboration

## Security Features

- API key authentication for all requests
- Complete data isolation between users
- No sensitive data collection (prompts/code)
- Secure invite system for teams
- Privacy-first design principles
- Rate limiting and abuse prevention

## Common Issues & Troubleshooting

**Authentication Problems:**
```bash
promptpulse logout
promptpulse login
```

**Collection Issues:**
```bash
promptpulse doctor  # Diagnose problems
promptpulse status  # Check health
```

**No Data Found:**
- Ensure Claude Code has been used
- Check `~/.claude/projects/` exists
- Verify file permissions

**Team Invitation Problems:**
- Check invite link expiration
- Verify recipient has account
- Generate new invite if needed

## Package Information

- **Name:** promptpulse
- **Version:** 1.1.2
- **Type:** ES module
- **License:** MIT
- **Repository:** https://github.com/eharris128/promptpulse
- **NPM:** https://www.npmjs.com/package/promptpulse
- **Documentation:** https://docs.promptpulse.dev
- **Dashboard:** https://www.promptpulse.dev

## Keywords
claude, claude-code, usage-tracking, analytics, cli, productivity, ai, monitoring, team-collaboration, leaderboards, team-management